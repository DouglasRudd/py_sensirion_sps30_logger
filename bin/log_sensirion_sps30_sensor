#!/usr/bin/python
# -*- coding: utf-8 -*-

# Import modules
import pys_logging_helpers
import py_sensirion_sps30_logger
import time, datetime, pytz
import os
import gc
from distutils.util import strtobool

print(pys_logging_helpers.date_message() + "Setting-up...")

# Variable names
response_names = [
  "pm1", "pm2.5", "pm4", "pm10", "pm0.5_number", "pm1_number", "pm2.5_number",
  "pm4_number", "pm10_number", "typical_particle_size"
]

# Catch programme's arguments
arguments = py_sensirion_sps30_logger.catch_arguments()

# To logical
# aggregate = strtobool(arguments.aggregate)

# To-do
# Switch for aggregation
#if aggregate:
#  list_length = 12
#  message_text = "This programme will query the sensor every 5 seconds, take the mean of 12 measurements and export to disk..."
#else:
#  list_length = 1
#  message_text = "This programme wil l query the sensor every 5 seconds and export the data to disk..."
  
list_length = 12
message_text = "This programme will query the sensor every 5 seconds, take the mean of 12 measurements and export to disk..."

# Connect to sensor
print(pys_logging_helpers.date_message() + "Connecting to sensor...")
sensor = py_sensirion_sps30_logger.sps30.SPS30(arguments.device)

# Start sensor
print(pys_logging_helpers.date_message() + "Starting the sensor...")
sensor.start()
time.sleep(0.5)

# Get sensor's serial number
sensor_serial_number = py_sensirion_sps30_logger.sps30.SPS30.read_serial_number(sensor)

print(
  pys_logging_helpers.date_message() + \
  "This sensor is: `" + \
  sensor_serial_number + \
  "`..."
)

print(pys_logging_helpers.date_message() + "Starting data logging...")

# Message about programme behaviour
print(pys_logging_helpers.date_message() + message_text)

# Start the measurement loop
# Allocate for measurement loop
list_results = []

try: 
  while True:
    
    # Start logging at the start of the minute
    if len(list_results) == 0 and pys_logging_helpers.date_unix(integer = True) % 60 != 0:
      pys_logging_helpers.nice_starter(verbose = True)
    else:
      pass
    
    # Query sensor 
    dict_results = py_sensirion_sps30_logger.get_sensirion_sps30_data(
      sensor,
      sensor_serial_number,
      time_zone = "UTC", 
      names = response_names
    )
    
    print(pys_logging_helpers.date_message() + "Sensor queried...")

    # Accumulate the measurements
    list_results.extend([dict_results])

    # Aggregation and file writing logic
    if len(list_results) == list_length: 

      print(pys_logging_helpers.date_message() + "Aggregating data...")

      dict_results_summary = py_sensirion_sps30_logger.summarise_sensirion_sps30_data(
        list_results = list_results,
        digits = 3,
        names = response_names,
        verbose = False
      )

      print(pys_logging_helpers.date_message() + "Exporting data...")

      # Build file name
      # Get day string from measurements
      day_string = datetime.datetime.fromtimestamp(
        dict_results_summary["date_unix"],
        pytz.timezone("UTC")
      ).strftime('%Y-%m-%d')

      file_name = sensor_serial_number + '_' + day_string + "_sensirion_sps30_data.csv"
      file_name = os.path.join(arguments.output, file_name)
      
      # Export data
      py_sensirion_sps30_logger.write_sensor_dict_to_csv(dict_results_summary, file_name)

      # Clear list for next measurement loop
      list_results = []
      
      # Garbage collection
      pys_logging_helpers.housekeeping()

    else: 
      pass
    
    # Sleep for next measurement iteration
    pys_logging_helpers.nice_waiter(5)

except KeyboardInterrupt:
  sensor.stop()
  sensor.close.port()
  print(pys_logging_helpers.date_message() + "Data logging stopped.")

#response = (
#  0.6205511093139648,
#  1.0630933046340942,
#  1.366864800453186,
#  1.3966455459594727,
#  3.2467234134674072,
#  4.521072864532471,
#  4.988091945648193,
#  5.043815612792969,
#  5.0525007247924805,
#  0.7423572540283203
#)
